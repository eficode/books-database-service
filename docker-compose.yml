# Compose specification

services:
  books-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: books-database-service
    volumes:
      - ./data:/app/data  # Persist the database
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=sqlite:///data/books.db
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8000/books/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
  # Database initialization service
  initialization:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - books-service
    volumes:
      - ./data:/app/data
    environment:
      - DATABASE_URL=sqlite:///data/books.db
    command: >
      sh -c "
        # Create database directory if it doesn't exist
        mkdir -p /app/data
        
        # Give the main service time to start
        sleep 5
        
        # Set up database structure
        python -c 'import sys, os; sys.path.insert(0, os.path.abspath(\".\")); from fastapi_demo.database import Base, engine; Base.metadata.create_all(bind=engine); print(\"Database tables created\")'
        
        # Run migrations to add columns
        python scripts/migrate_db.py
        
        # Add sample data if database is empty
        python -c 'import sqlite3; import os, sys; db_path=\"/app/data/books.db\"; conn = sqlite3.connect(db_path); cursor = conn.cursor(); cursor.execute(\"SELECT COUNT(*) FROM books\"); count = cursor.fetchone()[0]; conn.close(); print(f\"Found {count} books\"); sys.exit(0 if count > 0 else 1)' || python scripts/generate_books.py
      "
    restart: on-failure